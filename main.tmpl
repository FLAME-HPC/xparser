/**
 * \file  main.c
 * \brief Holds main function of the program.
 */

#include "header.h"

/** \fn int main(int argc, char * argv[])
 * \brief Main program loop.
 * \param argc Argument count.
 * \param argv Pointer Pointer to Argument vector.
 */
int main(int argc, char * argv[])
{
	/* Timing variables */
	double start, stop, interval;
	FILE *file;
	char data[100];
	char logfilepath[1000];
	char inputpath[1000];
	char * c;
	int lastd = 0;
	int i;
	int rc;
	int iteration_number;
	int iteration_total;
	int * p_iteration_number;
	/* For backwards compatabilty allocate current_xmachine */
	current_xmachine = (xmachine *)malloc(sizeof(xmachine));
	CHECK_POINTER(current_xmachine);
<?foreach xagent?>	//xmachine_memory_$name * temp_xmachine_$name;
<?end foreach?>
	/* Particle cloud data */
	double cloud_data[6];

/* For partition method. Makes geometric (-g flag) the default but may be overridden with -r for round-robin */
	int partition_method=1;

<?if parallel?>
	int err; /* MPI errors */
	char processor_name[MPI_MAX_PROCESSOR_NAME];
	int processor_name_length;
	MPI_Aint baseaddress;
	/* Variables needed to construct spacePartitionType */
	space_partition tmp_space_partition;
	int array_of_block_lengths[2] = {1, 6};
	MPI_Aint array_of_displacements[2];
	MPI_Datatype array_of_types[2] = {MPI_INT, MPI_DOUBLE};
<?end if?>

	/* Output frequency is 1 as default */
	output_frequency = 1;
	/* Set random seed */
/*	srand(time(NULL)); */

	<?if parallel?>
	/* MPI initialisation routine */
        err = MPI_Init(&argc, &argv);
        if (err != MPI_SUCCESS)
        {
            printf("MPI initialization failed!\n");
            exit(1);
        }

        /* Get total number of nodes and own node number */
        MPI_Comm_size(MPI_COMM_WORLD, &totalnodes);
        MPI_Comm_rank(MPI_COMM_WORLD, &node_number);
        /* Initialise spacePartitionType */
        MPI_Address(&tmp_space_partition, &baseaddress);
        MPI_Address(&tmp_space_partition.node_id, &array_of_displacements[0]);
        array_of_displacements[0] -= baseaddress;
        MPI_Address(&tmp_space_partition.partition_data[0], &array_of_displacements[1]);
        array_of_displacements[1] -= baseaddress;
        MPI_Type_struct(2, array_of_block_lengths, array_of_displacements, array_of_types, &spacePartitionType);
        MPI_Type_commit(&spacePartitionType);
    <?end if?>

	rc = MB_Env_Init();
	#ifdef ERRCHECK
	if (rc != MB_SUCCESS)
	{
	   fprintf(stderr, "ERROR: Failed to initialise Message Board environment\n");
	   switch(rc) {
	       case MB_ERR_MPI:
	           fprintf(stderr, "\t reason: MPI library not initialised\n");
	           break;
	       case MB_ERR_MEMALLOC:
	           fprintf(stderr, "\t reason: out of memory\n");
	           break;
           default:
               fprintf(stderr, "\t MB_Env_Init returned error code: %d (see libmboard docs for details)\n", rc);
               break;
	   }

	   <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
       exit(rc);

	}
	#endif

	/* Initialise pointers */
	initialise_pointers();
	p_iteration_number = &iteration_number;

<?if serial?>
	printf("FLAME Application: $model_name \n");
<?end if?>
<?if parallel?>
	if(node_number == 0) {
		printf("MPI FLAME Application: $model_name \n");
	}
<?end if?>



if(argc < 2)
	{
<?if serial?>
		printf("Usage: %s <number of iterations> [<states_directory>]/<init_state> <partitions> [-r | -g ]\n",argv[0]);
<?end if?>
<?if parallel?>
		if(node_number == 0) {
			printf("Usage: mpirun -np <partitions> %s <number of iterations> [<states_directory>]/<init_state> [-g | -r] \n",argv[0]);
		}
<?end if?>

		exit(0);
	}
	iteration_total = atoi(argv[1]);
<?if parallel?>	if(node_number == 0) <?end if?>printf("Iterations: %i\n", iteration_total);

	/* Read initial states of x-machines */
	if(argc < 3)
	{
		printf("Need two parameters\n");
		exit(0);
	}
	strcpy(inputpath, argv[2]);
/*<?if parallel?>	if(node_number == 0) <?end if?>printf("Initial states: %s\n", inputpath);*/

	i = 0;
	lastd = -1;
	while(inputpath[i] != '\0')
	{
		/* For windows directories */
		if(inputpath[i] == '\\') lastd=i;
		/* For unix directories */
		if(inputpath[i] == '/') lastd=i;
		i++;
	}
	strcpy(outputpath, inputpath);
	outputpath[lastd+1] = '\0';
/*<?if parallel?>	if(node_number == 0) <?end if?>printf("Ouput dir: %s\n", outputpath);*/

<?if serial?>
	/* Read number of space partitions (1 by default) */
	totalnodes = 1;
	if(argc > 3)
	{
		totalnodes = atoi(argv[3]);
	}

<?end if?>
	i = 3;
	while(argc > i)
	{
		if(strcmp(argv[i],"-f") == 0)
		{
			if(argc > (i+1))
			{
				output_offset = 0;
				/* Find offset, separated by the char '+' */
				c = strchr(argv[(i+1)], '+');
				if(c == NULL)
				{
					output_frequency = atoi(argv[(i+1)]);
					printf("Using output frequency of: %d\n", output_frequency);
				}
				else
				{
					output_offset = atoi(argv[(i+1)]+(c-argv[(i+1)])+1);
					argv[(i+1)][c-argv[(i+1)]] = 0;
					output_frequency = atoi(argv[(i+1)]);
					printf("Using output frequency of: %d with offset %d\n", output_frequency, output_offset);
				}

				if(output_frequency == 0)
				{
					printf("Output frequency cannot be zero\n");
					exit(0);
				}

				i++;
			}
			else
			{
				printf("Output frequency number not defined\n");
				exit(0);
			}
		}
		/* Partitioning method: -g = geometric, -r = round-robin */
		if(strcmp(argv[i],"-g") == 0) partition_method = 1;
		if(strcmp(argv[i],"-r") == 0) partition_method = 2;
		i++;
	}

	/* Read initial data into p_xmachine <?if parallel?>on the master node<?end if?> */
<?if parallel?>
    if (node_number == 0)
    {
<?end if?>
       //agent_list = p_xmachine;
       readinitialstates(inputpath, outputpath, p_iteration_number, cloud_data, partition_method, 0);
       /* Generate partitions */
       generate_partitions(cloud_data,totalnodes,partition_method);
       save_partition_data();
<?if parallel?>
    }
<?end if?>


<?if parallel?>
    /* Broadcast node data */
    broadcast_node_data(totalnodes, node_number);
<?end if?>

<?if serial?>
    /* Partition data */
    /* stc: no partitions in serial */
	//partition_data(totalnodes, agent_list, cloud_data, partition_method);
<?end if?>
<?if parallel?>
    /* Clear previously populated agent list before readinitialstates()
     *  overwrite the pointers and dereference allocated memory.
     */
    freexmachines();

    /* Partition the data by reading it in. Partitions are known so get the read function
     * to do the partitioning for us.
     */
    readinitialstates(inputpath, outputpath, p_iteration_number, cloud_data, partition_method, 1);
<?end if?>

<?if serial?>
		/*i = 0;
		current_node = *p_node_info;
		while(current_node)
		{
			printf("No of agents on partition %d: %d\n", current_node->node_id, current_node->agent_total);
			i += current_node->agent_total;
			current_node = current_node->next;
		}
		printf("Agent total check: %d\n", i);*/

        /* restore current_node pointer */
		//current_node = *p_node_info;
<?end if?>
<?if parallel?>
		/* Print processor name */
		printf("%d> ", node_number);
		MPI_Get_processor_name(processor_name, &processor_name_length);
		printf("Processor name: %s\n", processor_name);
		/* Print number of agents on node */
		printf("%d> ", node_number);
		printf("No of agents on node: %d\n", current_node->agent_total);

		/* Quickly check account for all agents */
		MPI_Reduce(&current_node->agent_total, &i, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
		if(node_number == 0) printf("%d> Agent total check: %d\n",node_number, i);
<?end if?>

	/* Start log file (now so that xvisualiser can read straight away) */
<?if parallel?>	if(node_number == 0)
	{<?end if?>
	/* Write log file */
	sprintf(logfilepath, "%slog.xml", outputpath);
	file = fopen(logfilepath, "w");
	fputs("<model_run>\n", file);
	fputs("<codetype>", file);
<?if serial?>	fputs("serial", file);<?end if?>
<?if parallel?>	fputs("parallel", file);<?end if?>
	fputs("</codetype>\n", file);
	fputs("<nodes>", file);
	sprintf(data, "%i", totalnodes);
	fputs(data, file);
	fputs("</nodes>\n", file);

	/* print timer into */
	fputs("<!-- <time> unit: milliseconds -->\n", file);

	<?if serial?>sprintf(data, "unspecified");<?end if?>
	<?if parallel?>sprintf(data, "%.2e ms", MPI_Wtick() * 1000.0);<?end if?>
	fputs("<!-- <time> timer resolution: ", file);
	fputs(data, file);
	fputs(")-->\n", file);

	start = get_time();
	stop = get_time();
	sprintf(data, "%.2e ms", (stop - start) * 1000.0);
	fputs("<!-- <time> timer overhead: ~", file);
	fputs(data, file);
	fputs(")-->\n", file);


	fclose(file);
<?if parallel?>	}<?end if?>
	/* Start timing */
	start = get_time();

    /* pre-randomise agents for first iteration */
    //randomisexagent();

	for(iteration_loop=iteration_number+1; iteration_loop < iteration_number+iteration_total+1; iteration_loop++)
	{
		interval = get_time();
		<?if parallel?>if(node_number == 0) {<?end if?>
		/* Print out iteration number */
		fprintf(stdout, "Iteration - %d\n", iteration_loop);
		/* Flush stdout to keep user updated on progress */
		fflush(stdout);
		<?if parallel?>}<?end if?>
		/* START OF ITERATION */
<?foreach layer?><?foreach function?><?foreach complete_sync?>
	rc = MB_SyncComplete(b_$message_name);
	#ifdef ERRCHECK
    if (rc != MB_SUCCESS)
    {
       fprintf(stderr, "ERROR: Could not complete sync of '$message_name' board\n");
       switch(rc) {
            case MB_ERR_INVALID:
               fprintf(stderr, "\t reason: '$message_name' board is invalid\n");
               break;
           case MB_ERR_MEMALLOC:
               fprintf(stderr, "\t reason: out of memory\n");
               break;
           case MB_ERR_INTERNAL:
               fprintf(stderr, "\t reason: internal error. Recompile libmoard in debug mode for more info \n");
               break;
           default:
               fprintf(stderr, "\t MB_SyncComplete returned error code: %d (see libmboard docs for details)\n", rc);
               break;
       }

       <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
       exit(rc);
    }
    #endif
    <?if filter?>rc = MB_Function_Assign(b_$message_name, MB_NULL_FUNCTION, NULL, 0);
	if ( rc != MB_SUCCESS )
	{
		fprintf(stderr, "Error while assigning NULL function to board\n");

		/* check value of rc to determine reason of failure. Handle error */
		/* don't continue if error can't be handled */
		exit(1);
	}
	/* Free memory used for filter composite params */
	free(FLAME_m_$message_name_composite_params);
	FLAME_m_$message_name_composite_params = NULL;
	<?end if?>
	<?end foreach?>

	current_xmachine_$agent_name_holder = $agent_name_$current_state_state->agents;
	while(current_xmachine_$agent_name_holder)
	{
		temp_xmachine_$agent_name_holder = current_xmachine_$agent_name_holder->next;
		current_xmachine_$agent_name = current_xmachine_$agent_name_holder->agent;
		current_xmachine_$agent_name_next_state = $agent_name_$next_state_state;
		/* For backwards compatability set current_xmachine */
		<?foreach xagent?>current_xmachine->xmachine_$name = NULL;
		<?end foreach?>current_xmachine->xmachine_$agent_name = current_xmachine_$agent_name;

		<?if condition?>if($condition(current_xmachine_$agent_name))
		{<?end if?>

		<?foreach function_input?>
		<?if filter?>rc = MB_Iterator_CreateFiltered(b_$name, &i_$name, &$filter, current_xmachine_$agent_name);<?end if?>
		<?if no_filter?>rc = MB_Iterator_Create(b_$name, &i_$name);<?end if?>
		#ifdef ERRCHECK
		if (rc != MB_SUCCESS)
		{
		   fprintf(stderr, "ERROR: Could not create Iterator for '$name'\n");
		   switch(rc) {
		       case MB_ERR_INVALID:
		           fprintf(stderr, "\t reason: '$name' board is invalid\n");
		           break;
		       case MB_ERR_LOCKED:
	               fprintf(stderr, "\t reason: '$name' board is locked\n");
	               break;
	           case MB_ERR_MEMALLOC:
	               fprintf(stderr, "\t reason: out of memory\n");
	               break;
	           case MB_ERR_INTERNAL:
	               fprintf(stderr, "\t reason: internal error. Recompile libmoard in debug mode for more info \n");
	               break;
	           default:
	           <?if filter?>
                   fprintf(stderr, "\t MB_Iterator_CreateFiltered returned error code: %d (see libmboard docs for details)\n", rc);
               <?end if?>
               <?if no_filter?>
                   fprintf(stderr, "\t MB_Iterator_Create returned error code: %d (see libmboard docs for details)\n", rc);
               <?end if?>
                   break;
		   }

		   <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
           exit(rc);
		}
		#endif
		MB_Iterator_Randomise(i_$name);
		<?end foreach?>

			i = $name();

		<?foreach function_input?>
		    rc = MB_Iterator_Delete(&i_$name);
		    #ifdef ERRCHECK
		    if (rc != MB_SUCCESS)
		    {
		       fprintf(stderr, "ERROR: Could not delete '$name' iterator\n");
		       switch(rc) {
		           case MB_ERR_INVALID:
		               fprintf(stderr, "\t reason: '$name' iterator is invalid\n");
		               break;
		           case MB_ERR_INTERNAL:
		               fprintf(stderr, "\t reason: internal error. Recompile libmoard in debug mode for more info \n");
		               break;
		           default:
                       fprintf(stderr, "\t MB_Iterator_Delete returned error code: %d (see libmboard docs for details)\n", rc);
                       break;
		       }

		       <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
               exit(rc);
		    }
		    #endif
		<?end foreach?>

			if(i == 1)
			{
				free_$agent_name_agent(current_xmachine_$agent_name_holder, $agent_name_$current_state_state);
			}
			else
			{
				transition_$agent_name_agent(current_xmachine_$agent_name_holder, $agent_name_$current_state_state, $agent_name_$next_state_state);
			}
		<?if condition?>}<?end if?>

		current_xmachine_$agent_name = NULL;

		current_xmachine_$agent_name_holder = temp_xmachine_$agent_name_holder;
	}

<?foreach start_sync?>
// new
<?if filter?>FLAME_build_filter_param_$filter_name();<?end if?>
//new
    rc = MB_SyncStart(b_$message_name);
    #ifdef ERRCHECK
    if (rc != MB_SUCCESS)
    {
       fprintf(stderr, "ERROR: Could not start sync of '$message_name' board\n");
       switch(rc) {
           case MB_ERR_INVALID:
               fprintf(stderr, "\t reason: '$message_name' board is invalid\n");
               break;
           case MB_ERR_LOCKED:
               fprintf(stderr, "\t reason: '$message_name' board is locked\n");
               break;
           case MB_ERR_MEMALLOC:
               fprintf(stderr, "\t reason: out of memory\n");
               break;
           case MB_ERR_INTERNAL:
               fprintf(stderr, "\t reason: internal error. Recompile libmoard in debug mode for more info \n");
               break;
           default:
               fprintf(stderr, "\t MB_SyncStart returned error code: %d (see libmboard docs for details)\n", rc);
               break;

       }

       <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
       exit(rc);
    }
    #endif
<?end foreach?>
<?end foreach?>
<?end foreach?>
<?foreach message?>
    rc = MB_Clear(b_$name);
    #ifdef ERRCHECK
    if (rc != MB_SUCCESS)
    {
       fprintf(stderr, "ERROR: Could not clear '$name' board\n");
       switch(rc) {
           case MB_ERR_INVALID:
               fprintf(stderr, "\t reason: '$name' board is invalid\n");
               break;
           case MB_ERR_LOCKED:
               fprintf(stderr, "\t reason: '$name' board is locked\n");
               break;
           case MB_ERR_INTERNAL:
               fprintf(stderr, "\t reason: internal error. Recompile libmoard in debug mode for more info \n");
               break;
           default:
               fprintf(stderr, "\t MB_Clear returned error code: %d (see libmboard docs for details)\n", rc);
               break;

       }

       <?if parallel?>MPI_Abort(MPI_COMM_WORLD, rc);<?end if?>
       exit(rc);
    }
    #endif
<?end foreach?>
	if(iteration_loop%output_frequency == output_offset)
	{
		saveiterationdata(iteration_loop);
	}
<?foreach xagent?><?foreach state?>
	/*printf("$agent_name_$name_state->count = %d\n", $agent_name_$name_state->count);*/
	$agent_name_$name_state->count = 0;
<?end foreach?><?end foreach?>
	/* Move agents to their start states */
<?foreach xagent?><?foreach endstate?>
	current_xmachine_$agent_name_holder = $agent_name_$name_state->agents;
	while(current_xmachine_$agent_name_holder)
	{
		temp_xmachine_$agent_name_holder = current_xmachine_$agent_name_holder->next;
		transition_$agent_name_agent(current_xmachine_$agent_name_holder, $agent_name_$name_state, $agent_name_$agent_start_state);

		current_xmachine_$agent_name_holder = temp_xmachine_$agent_name_holder;
	}
<?end foreach?><?end foreach?>
<?foreach enditfunc?>
		/* End of iteration code */
		$code<?end foreach?>
		/* Calculate if any agents need to jump S.P. */
		/* propagate_agents(); */
	/* Save iteration time to log file */
<?if parallel?>		if(node_number == 0)
		{<?end if?>
		file = fopen(logfilepath, "a");
		fputs("<iteration><no>", file);
		sprintf(data, "%i", iteration_loop);
		fputs(data, file);
		fputs("</no><time>", file);
		sprintf(data, "%d", (int)((get_time() - interval) * 1000) );
		fputs(data, file);
		fputs("</time></iteration>\n", file);
		fclose(file);
<?if parallel?>		}<?end if?>
	}

	/* Stop timing and print total time */
	stop = get_time();
	total_time = stop - start;
<?if serial?>	<?end if?><?if parallel?>	if(node_number == 0) <?end if?>printf("Execution time - %d:%02d:%03d [mins:secs:msecs]\n",
       (int)(total_time/60), ((int)total_time)%60, (((int)(total_time * 1000.0)) % 1000));

	clean_up(0);

	/* Exit successfully by returning zero to Operating System */
	return 0;
}
