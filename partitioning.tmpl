/**
 * \file  partitioning.c
 * \brief Holds partitioning functions.
 */

#include "header.h"

<?if parallel?>
/** \fn void send_spacepartition(int node_id, double minx, double maxx, double miny, double maxy, double minz, double maxz)
 * \brief Broadcast a space partition data to other nodes.
 */
void send_spacepartition(int node_id, double minx, double maxx, double miny, double maxy, double minz, double maxz)
{
	space_partition t_space_partition;
	t_space_partition.node_id = node_id;
	t_space_partition.partition_data[0] = minx;
	t_space_partition.partition_data[1] = maxx;
	t_space_partition.partition_data[2] = miny;
	t_space_partition.partition_data[3] = maxy;
	t_space_partition.partition_data[4] = minz;
	t_space_partition.partition_data[5] = maxz;
	MPI_Bcast(&t_space_partition, 1, spacePartitionType, 0, MPI_COMM_WORLD);
}
<?end if?>
/** \fn void create_partitions(char * filename, int * itno)
 * \brief Create space partitions.
 * \param filename Path to the initial memories of the X-machines.
 * \param itno Iteration number.
 */
void create_partitions(char * filename, int * itno)
{
<?if parallel?>	space_partition t_space_partition;
<?end if?>
	FILE *file;
	char c = ' ';
	char data[100];
	char buffer[100];
	node_information * temp_node;
	int all_total, count, i, j, reading, number, nodeid, found = 0;
	int in_tag, in_node, in_number, in_nodeid, in_partitions, in_minx, in_maxx, in_miny, in_maxy, in_minz, in_maxz;
	int x_split, y_split, z_split;
	int x_split_no, y_split_no, z_split_no;
	double x_splits[7], y_splits[7], z_splits[7];
	double x_total, x_min, x_max, x_mean, x_xmachine;
	double y_total, y_min, y_max, y_mean, y_xmachine;
	double z_total, z_min, z_max, z_mean, z_xmachine;
	double temp_point;
	location ** p_x_location;
	location ** p_y_location;
	location ** p_z_location;
	location * temp_x_location = NULL;
	location * temp_y_location = NULL;
	location * temp_z_location = NULL;
	location * current_location;
	p_x_location = &temp_x_location;
	p_y_location = &temp_y_location;
	p_z_location = &temp_z_location;
	
<?if parallel?>
	if(node_number == 0)
	{
<?end if?>
	/* Look for space partitions xml file */
	/* Open config file to read-only */
	sprintf(data, "%sspace_partitions.xml", outputpath);
	printf("Trying to read: %s ..", data);
	if((file = fopen(data, "r")) != NULL)
	{
		printf(" found.\n");
		/* File exists so read values for number of space partitions */
		
		reading = 1;
		i = 0;
		found = 0;
		in_tag = 0;
		in_number = 0;
		in_nodeid = 0;
		in_partitions = 0;
		in_minx = 0;
		in_maxx = 0;
		in_miny = 0;
		in_maxy = 0;
		in_minz = 0;
		in_maxz = 0;
		/* Read file until end of xml */
		while(reading==1)
		{
			/* Get the next char from the file */
			c = fgetc(file);
			
			/* If the end of a tag */
			if(c == '>')
			{
				/* Place 0 at end of buffer to make chars a string */
				buffer[i] = 0;
				
				if(strcmp(buffer, "spacepartitions") == 0) reading = 1;
				if(strcmp(buffer, "/spacepartitions") == 0) reading = 0;
				if(strcmp(buffer, "partitions") == 0) in_partitions = 1;
				if(strcmp(buffer, "/partitions") == 0)
				{
					in_partitions = 0;
					if(found) reading = 0;
				}
				if(strcmp(buffer, "number") == 0) in_number = 1;
				if(strcmp(buffer, "/number") == 0)
				{
					in_number = 0;
					if(number == totalnodes) found = 1;
				}
				if(strcmp(buffer, "node") == 0) in_node = 1;
				if(strcmp(buffer, "/node") == 0)
				{
					in_node = 0;
					if(found) add_node(nodeid, x_min, x_max, y_min, y_max, z_min, z_max);
				}
				if(strcmp(buffer, "nodeid") == 0) in_nodeid = 1;
				if(strcmp(buffer, "/nodeid") == 0) in_nodeid = 0;
				if(strcmp(buffer, "xmin") == 0) in_minx = 1;
				if(strcmp(buffer, "/xmin") == 0) in_minx = 0;
				if(strcmp(buffer, "xmax") == 0) in_maxx = 1;
				if(strcmp(buffer, "/xmax") == 0) in_maxx = 0;
				if(strcmp(buffer, "ymin") == 0) in_miny = 1;
				if(strcmp(buffer, "/ymin") == 0) in_miny = 0;
				if(strcmp(buffer, "ymax") == 0) in_maxy = 1;
				if(strcmp(buffer, "/ymax") == 0) in_maxy = 0;
				if(strcmp(buffer, "zmin") == 0) in_minz = 1;
				if(strcmp(buffer, "/zmin") == 0) in_minz = 0;
				if(strcmp(buffer, "zmax") == 0) in_maxz = 1;
				if(strcmp(buffer, "/zmax") == 0) in_maxz = 0;
				
				/* End of tag and reset buffer */
				in_tag = 0;
				i = 0;
			}
			/* If start of tag */
			else if(c == '<')
			{
				/* Place /0 at end of buffer to end numbers */
				buffer[i] = 0;
				/* Flag in tag */
				in_tag = 1;
				
				if(in_number) number = atoi(buffer);
				if(found && in_nodeid) nodeid = atoi(buffer);
				if(found && in_minx) { if(strcmp(buffer, "-SPINF") == 0) x_min = -SPINF; else x_min = atof(buffer); }
				if(found && in_maxx) { if(strcmp(buffer, "SPINF") == 0) x_max = SPINF; else x_max = atof(buffer); }
				if(found && in_miny) { if(strcmp(buffer, "-SPINF") == 0) y_min = -SPINF; else y_min = atof(buffer); }
				if(found && in_maxy) { if(strcmp(buffer, "SPINF") == 0) y_max = SPINF; else y_max = atof(buffer); }
				if(found && in_minz) { if(strcmp(buffer, "-SPINF") == 0) z_min = -SPINF; else z_min = atof(buffer); }
				if(found && in_maxz) { if(strcmp(buffer, "SPINF") == 0) z_max = SPINF; else z_max = atof(buffer); }
				
				/* Reset buffer */
				i = 0;
			}
			else
			{
				buffer[i] = c;
				i++;
			}
		}
		
		fclose(file);
	}
	else { printf(" not found.\n"); }
	
	if(found == 0)
	{
		printf("Space partition information not found, will calculate...\n");
		if(totalnodes != 1 && totalnodes != 2 &&totalnodes != 3 && totalnodes != 4 &&totalnodes != 8 && totalnodes != 9 &&totalnodes != 16) clean_up(100);
		
		x_total = 0.0;
		y_total = 0.0;
		z_total = 0.0;
		
		/* Read agent spacial data */
		/* Create first node and use to hold data */
		add_node(0, -SPINF, SPINF, -SPINF, SPINF, -SPINF, SPINF);
		current_node = *p_node_info;
		p_xmachine = &current_node->agents;
		
		readinitialstates(filename, itno, 0);
		
		current_node = *p_node_info;
		p_xmachine = &current_node->agents;
		current_xmachine = *p_xmachine;
		all_total = 0;
		while(current_xmachine)
		{
			<?foreach xagent?>
			<?if notfirst?>else <?end if?>if(current_xmachine->xmachine_$name != NULL)
			{
				x_xmachine = current_xmachine->xmachine_$name->$xvar;
				y_xmachine = current_xmachine->xmachine_$name->$yvar;
<?if use_zvar?>				z_xmachine = current_xmachine->xmachine_$name->$zvar;
<?end if?>
				add_location(x_xmachine, current_xmachine->xmachine_$name->iradius, p_x_location);
				x_total += x_xmachine;
				add_location(y_xmachine, current_xmachine->xmachine_$name->iradius, p_y_location);
				y_total += y_xmachine;
<?if use_zvar?>				add_location(z_xmachine, current_xmachine->xmachine_$name->iradius, p_z_location);
				z_total += z_xmachine;
<?end if?>
				if(all_total == 0)
				{
					x_min = x_xmachine;
					x_max = x_xmachine;
					y_min = y_xmachine;
					y_max = y_xmachine;
					<?if use_zvar?>					z_min = z_xmachine;
					z_max = z_xmachine;
<?end if?>
				}
				else
				{
					if(x_xmachine < x_min) x_min = x_xmachine;
					if(x_xmachine > x_max) x_max = x_xmachine;
					if(y_xmachine < y_min) y_min = y_xmachine;
					if(y_xmachine > y_max) y_max = y_xmachine;
					<?if use_zvar?>					if(z_xmachine < z_min) z_min = z_xmachine;
					if(z_xmachine > z_max) z_max = z_xmachine;
<?end if?>
				}
			}
<?end foreach?>
			
			all_total++;
			
			current_xmachine = current_xmachine->next;
		}
		
		<?if serial?>		printf("Number of space partitions: %d\n", totalnodes);<?end if?><?if parallel?>		printf("Number of nodes: %d", totalnodes);<?end if?>
		if(totalnodes == 1)
		{
			/* No need to do anything */
			<?if parallel?>send_spacepartition(0, -SPINF, SPINF, -SPINF, SPINF, -SPINF, SPINF);<?end if?>
		}
		else if(totalnodes == 2)
		{
			count = 0;
			temp_point = 0.0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					x_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			free_node_info();
			add_node(0, x_splits[0], SPINF, -SPINF, SPINF, -SPINF, SPINF);
			<?if parallel?>send_spacepartition(0, x_splits[0], SPINF, -SPINF, SPINF, -SPINF, SPINF);<?end if?>
			add_node(1, -SPINF, x_splits[0], -SPINF, SPINF, -SPINF, SPINF);
			<?if parallel?>send_spacepartition(1, -SPINF, x_splits[0], -SPINF, SPINF, -SPINF, SPINF);<?end if?>
		}
		else if(totalnodes == 3)
		{
			count = 0;
			temp_point = 0.0;
			x_split_no = 0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(x_split_no == 0 && count > (all_total/3))
				{
					x_splits[0] = (current_location->point + temp_point)/2.0;
					x_split_no++;
					current_location = current_location->next;
				}
				else if(x_split_no == 1 && count > 2*(all_total/3))
				{
					x_splits[1] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			free_node_info();
			add_node(0, x_splits[0], SPINF, -SPINF, SPINF, -SPINF, SPINF);
			<?if parallel?>send_spacepartition(0, x_splits[0], SPINF, -SPINF, SPINF, -SPINF, SPINF);<?end if?>
			add_node(1, x_splits[1], x_splits[0], -SPINF, SPINF, -SPINF, SPINF);
			<?if parallel?>send_spacepartition(1, x_splits[1], x_splits[0], -SPINF, SPINF, -SPINF, SPINF);<?end if?>
			add_node(2, -SPINF, x_splits[1], -SPINF, SPINF, -SPINF, SPINF);
			<?if parallel?>send_spacepartition(2, -SPINF, x_splits[1], -SPINF, SPINF, -SPINF, SPINF);<?end if?>
		}
		else if(totalnodes == 4)
		{
			/* Calculate x-axis half-way split */
			count = 0;
			temp_point = 0.0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					x_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			/* Calculate y-axis split on first half of x */
			freelocations(p_y_location);
			current_xmachine = *p_xmachine;
			all_total = 0;
			while(current_xmachine)
			{
<?foreach xagent?>
					<?if notfirst?>else <?end if?>if(current_xmachine->xmachine_$name != NULL)
					{
						if(current_xmachine->xmachine_$name->$xvar > x_splits[0])
						{
							add_location(current_xmachine->xmachine_$name->$yvar, current_xmachine->xmachine_$name->iradius, p_y_location); all_total++;
						}
					}
<?end foreach?>
				current_xmachine = current_xmachine->next;
			}
			count = 0;
			temp_point = 0.0;
			current_location = *p_y_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					y_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			/* Calculate y-axis split on second half of x */
			freelocations(p_y_location);
			current_xmachine = *p_xmachine;
			all_total = 0;
			while(current_xmachine)
			{
<?foreach xagent?>
				<?if notfirst?>else <?end if?>if(current_xmachine->xmachine_$name != NULL)
				{
					if(current_xmachine->xmachine_$name->$xvar <= x_splits[0])
					{
						add_location(current_xmachine->xmachine_$name->$yvar, current_xmachine->xmachine_$name->iradius, p_y_location); all_total++;
					}
				}
<?end foreach?>
				current_xmachine = current_xmachine->next;
			}
			count = 0;
			temp_point = 0.0;
			current_location = *p_y_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					y_splits[1] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			free_node_info();
			add_node(0, x_splits[0], SPINF, y_splits[0], SPINF, -SPINF, SPINF);
			add_node(1, x_splits[0], SPINF, -SPINF, y_splits[0], -SPINF, SPINF);
			add_node(2, -SPINF, x_splits[0], y_splits[1], SPINF, -SPINF, SPINF);
			add_node(3, -SPINF, x_splits[0], -SPINF, y_splits[1], -SPINF, SPINF);
			<?if parallel?>send_spacepartition(0, x_splits[0], SPINF, y_splits[0], SPINF, -SPINF, SPINF);
			send_spacepartition(1, x_splits[0], SPINF, -SPINF, y_splits[0], -SPINF, SPINF);
			send_spacepartition(2, -SPINF, x_splits[0], y_splits[1], SPINF, -SPINF, SPINF);
			send_spacepartition(3, -SPINF, x_splits[0], -SPINF, y_splits[1], -SPINF, SPINF);<?end if?>
		}
		else if(totalnodes == 8)
		{
			count = 0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(count >= (all_total/2))
				{
					x_splits[0] = current_location->point;
					current_location = NULL;
				}
				else current_location = current_location->next;
			}
			count = 0;
			current_location = *p_y_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					y_splits[0] = current_location->point;
					current_location = NULL;
				}
				else current_location = current_location->next;
			}
			count = 0;
			current_location = *p_z_location;
			while(current_location)
			{
				count++;
				if(count > (all_total/2))
				{
					z_splits[0] = current_location->point;
					current_location = NULL;
				}
				else current_location = current_location->next;
			}
			free_node_info();
			add_node(0, x_splits[0], SPINF, y_splits[0], SPINF, z_splits[0], SPINF);
			add_node(1, x_splits[0], SPINF, -SPINF, y_splits[0], z_splits[0], SPINF);
			add_node(2, -SPINF, x_splits[0], y_splits[0], SPINF, z_splits[0], SPINF);
			add_node(3, -SPINF, x_splits[0], -SPINF, y_splits[0], z_splits[0], SPINF);
			add_node(4, x_splits[0], SPINF, y_splits[0], SPINF, -SPINF, z_splits[0]);
			add_node(5, x_splits[0], SPINF, -SPINF, y_splits[0], -SPINF, z_splits[0]);
			add_node(6, -SPINF, x_splits[0], y_splits[0], SPINF, -SPINF, z_splits[0]);
			add_node(7, -SPINF, x_splits[0], -SPINF, y_splits[0], -SPINF, z_splits[0]);
			<?if parallel?>send_spacepartition(0, x_splits[0], SPINF, y_splits[0], SPINF, z_splits[0], SPINF);
			send_spacepartition(1, x_splits[0], SPINF, -SPINF, y_splits[0], z_splits[0], SPINF);
			send_spacepartition(2, -SPINF, x_splits[0], y_splits[0], SPINF, z_splits[0], SPINF);
			send_spacepartition(3, -SPINF, x_splits[0], -SPINF, y_splits[0], z_splits[0], SPINF);
			send_spacepartition(4, x_splits[0], SPINF, y_splits[0], SPINF, -SPINF, z_splits[0]);
			send_spacepartition(5, x_splits[0], SPINF, -SPINF, y_splits[0], -SPINF, z_splits[0]);
			send_spacepartition(6, -SPINF, x_splits[0], y_splits[0], SPINF, -SPINF, z_splits[0]);
			send_spacepartition(7, -SPINF, x_splits[0], -SPINF, y_splits[0], -SPINF, z_splits[0]);<?end if?>
		}
		else if(totalnodes == 9)
		{
			/* Calculate x-axis thirds splits */
			count = 0;
			temp_point = 0.0;
			x_split_no = 0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(x_split_no == 0 && count > (all_total/3))
				{
					x_splits[1] = (current_location->point + temp_point)/2.0;
					x_split_no++;
					current_location = current_location->next;
				}
				else if(x_split_no == 1 && count > 2*(all_total/3))
				{
					x_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			/* Calculate y-axis thirds splits */
			count = 0;
			temp_point = 0.0;
			y_split_no = 0;
			current_location = *p_y_location;
			while(current_location)
			{
				count++;
				if(y_split_no == 0 && count > (all_total/3))
				{
					y_splits[1] = (current_location->point + temp_point)/2.0;
					y_split_no++;
					current_location = current_location->next;
				}
				else if(y_split_no == 1 && count > 2*(all_total/3))
				{
					y_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			free_node_info();
			add_node(0, -SPINF,      x_splits[0], -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(1, x_splits[0], x_splits[1], -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(2, x_splits[1], SPINF,       -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(3, -SPINF,      x_splits[0], y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(4, x_splits[0], x_splits[1], y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(5, x_splits[1], SPINF,       y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(6, -SPINF,      x_splits[0], y_splits[1], SPINF,       -SPINF, SPINF);
			add_node(7, x_splits[0], x_splits[1], y_splits[1], SPINF,       -SPINF, SPINF);
			add_node(8, x_splits[1], SPINF,       y_splits[1], SPINF,       -SPINF, SPINF);
			<?if parallel?>send_spacepartition(0, -SPINF,      x_splits[0], -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(1, x_splits[0], x_splits[1], -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(2, x_splits[1], SPINF,       -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(3, -SPINF,      x_splits[0], y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(4, x_splits[0], x_splits[1], y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(5, x_splits[1], SPINF,       y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(6, -SPINF,      x_splits[0], y_splits[1], SPINF,       -SPINF, SPINF);
			send_spacepartition(7, x_splits[0], x_splits[1], y_splits[1], SPINF,       -SPINF, SPINF);
			send_spacepartition(8, x_splits[1], SPINF,       y_splits[1], SPINF,       -SPINF, SPINF);<?end if?>
		}
		else if(totalnodes == 16)
		{
			/* Calculate x-axis fourths splits */
			count = 0;
			temp_point = 0.0;
			x_split_no = 0;
			current_location = *p_x_location;
			while(current_location)
			{
				count++;
				if(x_split_no == 0 && count > (all_total/4))
				{
					x_splits[2] = (current_location->point + temp_point)/2.0;
					x_split_no++;
					current_location = current_location->next;
				}
				else if(x_split_no == 1 && count > 2*(all_total/4))
				{
					x_splits[1] = (current_location->point + temp_point)/2.0;
					x_split_no++;
				}
				else if(x_split_no == 2 && count > 3*(all_total/4))
				{
					x_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			/* Calculate y-axis thirds splits */
			count = 0;
			temp_point = 0.0;
			y_split_no = 0;
			current_location = *p_y_location;
			while(current_location)
			{
				count++;
				if(y_split_no == 0 && count > (all_total/4))
				{
					y_splits[2] = (current_location->point + temp_point)/2.0;
					y_split_no++;
					current_location = current_location->next;
				}
				else if(y_split_no == 1 && count > 2*(all_total/4))
				{
					y_splits[1] = (current_location->point + temp_point)/2.0;
					y_split_no++;
				}
				else if(y_split_no == 2 && count > 3*(all_total/4))
				{
					y_splits[0] = (current_location->point + temp_point)/2.0;
					current_location = NULL;
				}
				else
				{
					temp_point = current_location->point;
					current_location = current_location->next;
				}
			}
			free_node_info();
			add_node(0,  -SPINF,      x_splits[0], -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(1,  x_splits[0], x_splits[1], -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(2,  x_splits[1], x_splits[2], -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(3,  x_splits[2], SPINF,       -SPINF,      y_splits[0], -SPINF, SPINF);
			add_node(4,  -SPINF,      x_splits[0], y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(5,  x_splits[0], x_splits[1], y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(6,  x_splits[1], x_splits[2], y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(7,  x_splits[2], SPINF,       y_splits[0], y_splits[1], -SPINF, SPINF);
			add_node(8,  -SPINF,      x_splits[0], y_splits[1], y_splits[2], -SPINF, SPINF);
			add_node(9,  x_splits[0], x_splits[1], y_splits[1], y_splits[2], -SPINF, SPINF);
			add_node(10, x_splits[1], x_splits[2], y_splits[1], y_splits[2], -SPINF, SPINF);
			add_node(11, x_splits[2], SPINF,       y_splits[1], y_splits[2], -SPINF, SPINF);
			add_node(12, -SPINF     , x_splits[0], y_splits[2], SPINF,       -SPINF, SPINF);
			add_node(13, x_splits[0], x_splits[1], y_splits[2], SPINF,       -SPINF, SPINF);
			add_node(14, x_splits[1], x_splits[2], y_splits[2], SPINF,       -SPINF, SPINF);
			add_node(15, x_splits[2], SPINF,       y_splits[2], SPINF,       -SPINF, SPINF);
			<?if parallel?>send_spacepartition(0,  -SPINF,      x_splits[0], -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(1,  x_splits[0], x_splits[1], -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(2,  x_splits[1], x_splits[2], -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(3,  x_splits[2], SPINF,       -SPINF,      y_splits[0], -SPINF, SPINF);
			send_spacepartition(4,  -SPINF,      x_splits[0], y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(5,  x_splits[0], x_splits[1], y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(6,  x_splits[1], x_splits[2], y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(7,  x_splits[2], SPINF,       y_splits[0], y_splits[1], -SPINF, SPINF);
			send_spacepartition(8,  -SPINF,      x_splits[0], y_splits[1], y_splits[2], -SPINF, SPINF);
			send_spacepartition(9,  x_splits[0], x_splits[1], y_splits[1], y_splits[2], -SPINF, SPINF);
			send_spacepartition(10, x_splits[1], x_splits[2], y_splits[1], y_splits[2], -SPINF, SPINF);
			send_spacepartition(11, x_splits[2], SPINF,       y_splits[1], y_splits[2], -SPINF, SPINF);
			send_spacepartition(12, -SPINF     , x_splits[0], y_splits[2], SPINF,       -SPINF, SPINF);
			send_spacepartition(13, x_splits[0], x_splits[1], y_splits[2], SPINF,       -SPINF, SPINF);
			send_spacepartition(14, x_splits[1], x_splits[2], y_splits[2], SPINF,       -SPINF, SPINF);
			send_spacepartition(15, x_splits[2], SPINF,       y_splits[2], SPINF,       -SPINF, SPINF);<?end if?>
		}
		else
		{
			//clean_up(100); /* Handled at start of function */
		}
	}
<?if serial?>
	/* Print info in space partitions list */
	current_node = *p_node_info;
	while(current_node)
	{
		printf("%d>\taxis\tmin\tmax\n", current_node->node_id);
		printf("%d>\tx", current_node->node_id);
		if(current_node->partition_data[0]==SPINF) printf("\tINF");
		else if(current_node->partition_data[0]==-SPINF) printf("\t-INF");
		else printf("\t%f", current_node->partition_data[0]);
		if(current_node->partition_data[1]==SPINF) printf("\tINF\n");
		else if(current_node->partition_data[1]==-SPINF) printf("\t-INF\n");
		else printf("\t%f\n", current_node->partition_data[1]);
		printf("%d>\ty", current_node->node_id);
		if(current_node->partition_data[2]==SPINF) printf("\tINF");
		else if(current_node->partition_data[2]==-SPINF) printf("\t-INF");
		else printf("\t%f", current_node->partition_data[2]);
		if(current_node->partition_data[3]==SPINF) printf("\tINF\n");
		else if(current_node->partition_data[3]==-SPINF) printf("\t-INF\n");
		else printf("\t%f\n", current_node->partition_data[3]);
		printf("%d>\tz", current_node->node_id);
		if(current_node->partition_data[4]==SPINF) printf("\tINF");
		else if(current_node->partition_data[4]==-SPINF) printf("\t-INF");
		else printf("\t%f", current_node->partition_data[4]);
		if(current_node->partition_data[5]==SPINF) printf("\tINF\n");
		else if(current_node->partition_data[5]==-SPINF) printf("\t-INF\n");
		else printf("\t%f\n", current_node->partition_data[5]);
		current_node = current_node->next;
	}
<?end if?>
<?if parallel?>
	}
	else
	{
		for(i=0; i<totalnodes; i++)
		{
			MPI_Bcast(&t_space_partition, 1, spacePartitionType, 0, MPI_COMM_WORLD);
			if(t_space_partition.node_id == -1) clean_up(101);
			else //if(t_space_partition.node_id == node_number)
			{
			add_node(t_space_partition.node_id, t_space_partition.partition_data[0], t_space_partition.partition_data[1], t_space_partition.partition_data[2], t_space_partition.partition_data[3], t_space_partition.partition_data[4], t_space_partition.partition_data[5]);
			}
		}
	}
	/* Print info in space partitions list */
	printf("%d> ", node_number);
	printf("%d\taxis\tmin\tmax\n", node_number);
	printf("%d> ", node_number);
	printf("x\t%f\t%f\n", current_node->partition_data[0], current_node->partition_data[1]);
	printf("%d> ", node_number);
	printf("y\t%f\t%f\n", current_node->partition_data[2], current_node->partition_data[3]);
	printf("%d> ", node_number);
	printf("z\t%f\t%f\n", current_node->partition_data[4], current_node->partition_data[5]);
<?end if?>
	/* Write to space partitions xml file */
<?if parallel?>
	if(node_number == 0)
	{
<?end if?>
	if(found == 0)
	{
		sprintf(data, "%sspace_partitions.xml", outputpath);
		file = fopen(data, "w");
		printf("Space partition xml saved to: %s\n", data);
		fputs("<spacepartitions>" , file);
		fputs("<partitions>" , file);
		fputs("<number>" , file);
		sprintf(data, "%d", totalnodes);
		fputs(data, file);
		fputs("</number>" , file);
<?if parallel?>
		fputs("<node>" , file);
		fputs("<nodeid>0</nodeid>" , file);
		fputs("<xmin>" , file);
		if(current_node->partition_data[0] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[0] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f",current_node->partition_data[0]); fputs(data, file); }
		fputs("</xmin>" , file);
		fputs("<xmax>" , file);
		if(current_node->partition_data[1] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[1] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f", current_node->partition_data[1]); fputs(data, file); }
		fputs("</xmax>" , file);
		fputs("<ymin>" , file);
		if(current_node->partition_data[2] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[2] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f", current_node->partition_data[2]); fputs(data, file); }
		fputs("</ymin>" , file);
		fputs("<ymax>" , file);
		if(current_node->partition_data[3] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[3] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f", current_node->partition_data[3]); fputs(data, file); }
		fputs("</ymax>" , file);
		fputs("<zmin>" , file);
		if(current_node->partition_data[4] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[4] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f", current_node->partition_data[4]); fputs(data, file); }
		fputs("</zmin>" , file);
		fputs("<zmax>" , file);
		if(current_node->partition_data[5] == SPINF) fputs("SPINF" , file);
		else if(current_node->partition_data[5] == -SPINF) fputs("-SPINF" , file);
		else{ sprintf(data, "%f", current_node->partition_data[5]); fputs(data, file); }
		fputs("</zmax>" , file);
		fputs("</node>" , file);
<?end if?>
	temp_node = *p_node_info;
	while(temp_node)
	{
	fputs("<node>" , file);
	fputs("<nodeid>" , file);
	sprintf(data, "%i", temp_node->node_id);
	fputs(data, file);
	fputs("</nodeid>" , file);
	fputs("<xmin>" , file);
	if(temp_node->partition_data[0] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[0] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[0]); fputs(data, file); }
	fputs("</xmin>" , file);
	fputs("<xmax>" , file);
	if(temp_node->partition_data[1] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[1] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[1]); fputs(data, file); }
	fputs("</xmax>" , file);
	fputs("<ymin>" , file);
	if(temp_node->partition_data[2] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[2] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[2]); fputs(data, file); }
	fputs("</ymin>" , file);
	fputs("<ymax>" , file);
	if(temp_node->partition_data[3] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[3] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[3]); fputs(data, file); }
	fputs("</ymax>" , file);
	fputs("<zmin>" , file);
	if(temp_node->partition_data[4] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[4] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[4]); fputs(data, file); }
	fputs("</zmin>" , file);
	fputs("<zmax>" , file);
	if(temp_node->partition_data[5] == SPINF) fputs("SPINF" , file);
	else if(temp_node->partition_data[5] == -SPINF) fputs("-SPINF" , file);
	else{ sprintf(data, "%f", temp_node->partition_data[5]); fputs(data, file); }
	fputs("</zmax>" , file);
	fputs("</node>" , file);
	
	temp_node = temp_node->next;
	}
	fputs("</partitions>" , file);
	fputs("</spacepartitions>" , file);
	fclose(file);
<?if serial?>
	current_node = *p_node_info;
	p_xmachine = &current_node->agents;
<?end if?>
	freexmachines();
	current_node->agent_total = 0;
	freelocations(p_x_location);
	freelocations(p_y_location);
	freelocations(p_z_location);
	}
<?if parallel?>}<?end if?>
}
