/**
 * \file  memory.c
 * \brief Holds memory functions.
 */

#include "header.h"

/** \fn void initialise_pointers()
 * \brief Initialises pointers to xmachine, message, and node lists.
 */
void initialise_pointers()
{
	temp_xmachine = NULL;
	p_xmachine = &temp_xmachine;
<?foreach message?>	temp_$name_message = NULL;
	p_$name_message = &temp_$name_message;
<?end foreach?>	temp_node_info = NULL;
	p_node_info = &temp_node_info;
}

/* add_location */
/** \fn void add_location(double point, double iradius, location ** p_location)
 * \brief Adds a location in order into the location list.
 * \param point Position of an agent.
 * \param iradius Interaction radius.
 * \param p_location Pointer Pointer to the location list.
 */
void add_location(double point, double iradius, location ** p_location)
{
	location * current = *p_location;
	location * tmp = NULL;
	location * newlocation = NULL;
	int found = 0;
	
	while(found == 0)
	{
		if(current == NULL) found = 1;
		else if(point > current->point) found = 1;
		else
		{
			tmp = current;
			current = current->next;
		}
	}
	
	newlocation = (location *)malloc(sizeof(location));
	
	if(tmp)
	{
		tmp->next = newlocation;
	}
	else
	{
		*p_location = newlocation;
	}
	
	newlocation->next = current;
	newlocation->point = point;
	newlocation->iradius = iradius;
}

/* freelocations */
/** \fn void freelocations(location ** p_location)
 * \brief Free locations from the location list.
 * \param p_location Pointer Pointer to the location list.
 */
void freelocations(location ** p_location)
{
	location * head = *p_location;
	location * tmp = NULL;
	
	while(head)
	{
		tmp = head->next;
		free(head);
		head = tmp;
	}
	
	*p_location = NULL;
}

/* add_xmachine */
/** \fn xmachine * add_xmachine()
 * \brief Add an X-machine to the current being used X-machine list.
 * \return Pointer to the added X-machine.
 */
xmachine * add_xmachine()
{
	xmachine * current = (xmachine *)malloc(sizeof(xmachine));
<?foreach xagent?>	current->xmachine_$name = NULL;
<?end foreach?>	current->next = *p_xmachine;
	*p_xmachine = current;
	
	current_node->agent_total++;
	
	return current;
}
<?foreach xagent?>
/** \fn void add_$name_agent(<?foreach xagentvar?>$type <?if dynamic_array?>* <?end if?>$name<?if static_array?>[]<?end if?><?if notlast?>, <?end if?><?end foreach?>)
 * \brief Add $name X-machine to the current being used X-machine list.
<?foreach xagentvar?> * \param $name Variable for the X-machine memory.
<?end foreach?> */
void add_$name_agent(<?foreach xagentvar?>$type <?if dynamic_array?>* <?end if?>$name<?if static_array?>[]<?end if?><?if notlast?>, <?end if?><?end foreach?>)
{
	xmachine * new_xmachine = add_xmachine();
	xmachine_memory_$name * current = (xmachine_memory_$name *)malloc(sizeof(xmachine_memory_$name));
	
	new_xmachine->xmachine_$name = current;
<?foreach xagentvar?><?if not_array?>	current->$name = $name;<?end if?><?if dynamic_array?>	current->$name = $name;<?end if?><?if static_array?>	memcpy(current->$name, $name, $arraylength*sizeof($type));<?end if?>
<?end foreach?>}
<?end foreach?>
/** \fn void free_agent()
 * \brief Free the currently being used X-machine.
 */
/* free_agent */
void free_agent()
{
	xmachine * head = *p_xmachine;
	xmachine * tmp = NULL;
	
	while(head)
	{
		if(head == current_xmachine)
		{
			if(tmp) tmp->next = head->next;
			else *p_xmachine = head->next;
<?foreach xagent?>			if(head->xmachine_$name)
			{
<?foreach xagentvar?><?if dynamic_array?>				free_$type(head->xmachine_$agent_name->$name);
<?end if?><?end foreach?>				free(head->xmachine_$name);
			}
<?end foreach?>
		free(head);
		head = NULL;
	}
	else
	{
		tmp = head;
		head = tmp->next;
	}
}
	
	current_node->agent_total--;
}

/* freexmachines */
/** \fn void freexmachines()
 * \brief Free the currently being used X-machine list.
 */
void freexmachines()
{
	xmachine * head = *p_xmachine;
	xmachine * tmp = NULL;
	
	while(head)
	{
		tmp = head->next;
<?foreach xagent?>		if(head->xmachine_$name)
		{
<?foreach xagentvar?><?if dynamic_array?>			free_$type(head->xmachine_$agent_name->$name);
<?end if?><?end foreach?>			free(head->xmachine_$name);
		}
<?end foreach?>		free(head);
		head = tmp;
	}
	
	*p_xmachine = NULL;
}

<?foreach allvar?><?if not_array?>
/** \fn void set_$name($type $name) 
 * \brief Set $name memory variable for current X-machine.
 * \param $name New value for variable.
 */
void set_$name($type $name)
{
<?foreach xagent?><?if allvar_in_agent?>	if(current_xmachine->xmachine_$name) current_xmachine->xmachine_$name->$allvar_name = $allvar_name;
<?end if?><?end foreach?>}

/** \fn $type get_$name()
 * \brief Get $name memory variable from current X-machine.
 * \return Value for variable.
 */
$type get_$name()
{
<?foreach xagent?><?if allvar_in_agent?>	if(current_xmachine->xmachine_$name) return current_xmachine->xmachine_$name->$allvar_name;
<?end if?><?end foreach?>}
<?end if?><?end foreach?>
/** \fn void randomisexagent()
 * \brief Randomise the current X-machine list.
 */
void randomisexagent() {

    int i, rnd;
    int xm_count;
    xmachine *current;
    xmachine **address_list;
    
    xm_count = current_node->agent_total;

    /* allocate mem for dynamic temp array */
    address_list = (xmachine **)malloc(sizeof(xmachine *) * xm_count);

    p_xmachine = &current_node->agents;
    
    /* populate address list */
    i = 0;
    current = *p_xmachine;
    while(current)
    {
        address_list[i] = current;
        current = current->next;
        i++;
    }

    /* randomise address list */
    for (i = xm_count - 1; i > 0; i--)
    {
        /* get random number */
        rnd = (int)((double)i * rand() / (RAND_MAX + 1.0));

        if (rnd == i) continue;

        /* use 'current' as temp var to swap addresses */
        current = address_list[i];
        address_list[i] = address_list[rnd];
        address_list[rnd] = current;
    }

    /* build new xmachine list from randomised address list */
    *p_xmachine = NULL;
    for (i = 0; i < xm_count; i++)
    {
        address_list[i]->next = *p_xmachine;
        *p_xmachine = address_list[i];
    }

    free(address_list);
}


/** \fn void add_node(int node_id, double minx, double maxx, double miny, double maxy, double minz, double maxz)
 * \brief Add a node to the node list.
 * \param node_id The node ID.
 * \param minx The minumum value on the x-axis of the bounding volume.
 * \param maxx The maximum value on the x-axis of the bounding volume.
 * \param miny The minumum value on the y-axis of the bounding volume.
 * \param maxy The maximum value on the y-axis of the bounding volume.
 * \param minz The minumum value on the z-axis of the bounding volume.
 * \param maxz The maximum value on the z-axis of the bounding volume.
 */
void add_node(int node_id, double minx, double maxx, double miny, double maxy, double minz, double maxz)
{
	node_information * current = *p_node_info;
	node_information * tmp = NULL;
	
	while(current)
	{
		tmp = current;
		current = current->next;
	}
	
	current = (node_information *)malloc(sizeof(node_information));
<?if parallel?>	if(node_id == node_number) current_node = current;<?end if?>
	if(tmp)
	{
		tmp->next = current;
	}
	else
	{
		*p_node_info = current;
	}
	
	current->next = NULL;
	current->node_id = node_id;
	current->agents_in_halo = 0;
	current->agent_total = 0;
	current->agents = NULL;
<?foreach message?>	current->$name_messages = NULL;
<?end foreach?>
<?if parallel?><?foreach message?>	current->$name_message_no = 0;
<?end foreach?><?foreach xagent?>	current->$name_agents = NULL;
	current->$name_agent_no = 0;
<?end foreach?>
<?end if?>
	current->partition_data[0] = minx;
	current->partition_data[1] = maxx;
	current->partition_data[2] = miny;
	current->partition_data[3] = maxy;
	current->partition_data[4] = minz;
	current->partition_data[5] = maxz;
}

/**\fn void free_node_info()
 * \brief Free the node list.
 */
void free_node_info()
{
	node_information * tmp, * head;
	head = *p_node_info;
	
	while(head)
	{
		tmp = head->next;
		free(head);
		head = tmp;
	}
	
	*p_node_info = NULL;
}

/** \fn void clean_up(int code)
 * \brief Add a node to the node list.
 * \param code The error code (zero is no error).
 */
void clean_up(int code)
{
	FILE *file;
	char data[100];
	
	
	/* Free x-machine memory */
<?if serial?>
	current_node = *p_node_info;
	while(current_node)
	{
		p_xmachine = &current_node->agents;
<?end if?>
	freexmachines();
	current_node->agent_total = 0;
<?if serial?>
		current_node = current_node->next;
	}
<?end if?>
	/* Free space partitions linked list */
	free_node_info();
	
<?if parallel?>
		/* MPI finalise routine */
		MPI_Finalize();
		
		if(node_number == 0)
		{
<?end if?>
	/* Write log file */
	sprintf(data, "%slog.xml", outputpath);
	file = fopen(data, "a");
	fputs("<lastiteration>", file);
	sprintf(data, "%i", iteration_loop);
	fputs(data, file);
	fputs("</lastiteration>", file);
	fputs("<totaltime>", file);
	sprintf(data, "%i", total_time);
	fputs(data, file);
	fputs("</totaltime>", file);
	fputs("<totalmessages>", file);
	sprintf(data, "%i", total_messages);
	fputs(data, file);
	fputs("</totalmessages>", file);
	fputs("</model_run>", file);
	fclose(file);
<?if parallel?>	}<?end if?>
	
	if(code != 0)
	{
		printf("*** Error: ");
		if(code == 100) printf("cannot handle specified number of space partitions");
		if(code == 101) printf("could not find number of space partitions config in file");
		
		printf(" ***");
		exit(0);
	}
}
<?if parallel?>
/** \fn void send_agent_pack(node_information * node_info, int buffersize)
 * \brief Send a packed MPI message.
 */
void send_agent_pack(node_information * node_info, int buffersize)
{
	int data[$number_xagentsplusone];
	int i, position = 0;
	char buf[buffersize];
	data[0] = buffersize;
	xmachine * temp_xmachine;
<?foreach xagent?>	data[$xagentcountplusone] = node_info->$name_agent_no;
	xmachine_memory_$name $name_agent_list[node_info->$name_agent_no];
<?end foreach?>
	MPI_Send(&data, $number_xagentsplusone, MPI_INT, node_info->node_id, 36, MPI_COMM_WORLD);
	
	if(buffersize > 0)
	{
<?foreach xagent?>		i = 0;
		temp_xmachine = node_info->$name_agents;
		while(temp_xmachine)
		{
<?foreach xagentvar?>			$agent_name_agent_list[i].$name = temp_xmachine->xmachine_$agent_name->$name;
<?end foreach?>			i++;
			temp_xmachine = temp_xmachine->next;
		}
		MPI_Pack($name_agent_list, node_info->$name_agent_no, xmachine$nameType, buf, buffersize, &position, MPI_COMM_WORLD);
		
<?end foreach?>		MPI_Send(buf, position, MPI_PACKED, node_info->node_id, 44, MPI_COMM_WORLD);
	}
}

/** \fn void receive_agent_pack(node_information * node_info, int buffersize,<?foreach xagent?> int $name_agent_no<?if notlast?>, <?end if?><?end foreach?>)
 * \brief Receive a packed MPI message.
 */
void receive_agent_pack(node_information * node_info, int buffersize, <?foreach xagent?>int $name_agent_no<?if notlast?>, <?end if?><?end foreach?>)
{
	char buf[buffersize];
	int checkbuffersize, i, position = 0;
	xmachine * temp_xmachine;
<?foreach xagent?>	xmachine_memory_$name $name_agent_list[$name_agent_no];
<?end foreach?>	MPI_Recv(buf, buffersize, MPI_PACKED, node_info->node_id, 44, MPI_COMM_WORLD, &status);
	MPI_Get_count(&status, MPI_PACKED, &checkbuffersize);<?foreach xagent?>
	
	MPI_Unpack(buf, checkbuffersize, &position, &$name_agent_list, $name_agent_no, xmachine$nameType, MPI_COMM_WORLD);
	for(i=0; i<$name_agent_no; i++)
	{
		add_$name_agent(<?foreach xagentvar?>$agent_name_agent_list[i].$name<?if notlast?>, <?end if?><?end foreach?>);
	}<?end foreach?>
}
<?end if?>
/** \fn void propagate_agents()
 * \brief Check agent positions to see if any need to be moved to a another node.
 */
void propagate_agents()
{
	int data[$number_xagentsplusone];
	node_information * node_info;
	xmachine * before_xmachine, * temp_xmachine;
	xmachine ** p_temp_xmachine;
	int count = 0;
	double x_xmachine, y_xmachine, z_xmachine;
<?if parallel?>	int agent_type;
	int buffersize, packsize;
<?end if?>	current_xmachine = *p_xmachine;
	before_xmachine = NULL;
	while(current_xmachine)
	{
<?foreach xagent?>		<?if notfirst?>else <?end if?>if(current_xmachine->xmachine_$name != NULL)
		{
			x_xmachine = current_xmachine->xmachine_$name->$xvar;
			y_xmachine = current_xmachine->xmachine_$name->$yvar;
<?if use_zvar?>			z_xmachine = current_xmachine->xmachine_$name->$zvar;<?end if?><?if no_zvar?>			z_xmachine = 0.0;<?end if?>
<?if parallel?>			agent_type = $xagent_count;<?end if?>
		}
<?end foreach?>		
		if(x_xmachine < current_node->partition_data[0] ||
		   x_xmachine > current_node->partition_data[1] ||
		   y_xmachine < current_node->partition_data[2] ||
		   y_xmachine > current_node->partition_data[3] ||
		   z_xmachine < current_node->partition_data[4] ||
		   z_xmachine > current_node->partition_data[5])
		{
			node_info = *p_node_info;
			while(node_info)
			{
				if(node_info->node_id != current_node->node_id &&
				node_info->partition_data[0] < x_xmachine && node_info->partition_data[1] > x_xmachine &&
				node_info->partition_data[2] < y_xmachine && node_info->partition_data[3] > y_xmachine &&
				node_info->partition_data[4] < z_xmachine && node_info->partition_data[5] > z_xmachine)
				{
<?if serial?>
		/* Remove agent */
		if(before_xmachine) before_xmachine->next = current_xmachine->next;
		else *p_xmachine = current_xmachine->next;
		current_node->agent_total--;
		/* Add agent */
		p_temp_xmachine = &node_info->agents;
		temp_xmachine = *p_temp_xmachine;
		current_xmachine->next = temp_xmachine;
		*p_temp_xmachine = current_xmachine;
		node_info->agent_total++;
<?end if?><?if parallel?>					// Remove agent
					if(before_xmachine) before_xmachine->next = current_xmachine->next;
					else *p_xmachine = current_xmachine->next;
					current_node->agent_total--;
					// Add agent
<?foreach xagent?>					if(agent_type == $xagent_count)
					{
						node_info->$name_agent_no++;
						p_temp_xmachine = &node_info->$name_agents;
					}
<?end foreach?>					
					temp_xmachine = *p_temp_xmachine;
					current_xmachine->next = temp_xmachine;
					*p_temp_xmachine = current_xmachine;
<?end if?>					node_info = NULL;
				}
				else node_info = node_info->next;
				}
			}
			else before_xmachine = current_xmachine;
			
			if(before_xmachine) current_xmachine = before_xmachine->next;
			else current_xmachine = NULL;
			//current_xmachine = current_xmachine->next;
		}
<?if parallel?>		// send agent pack message
		node_info = *p_node_info;
		while(node_info)
		{
			if(node_number != node_info->node_id)
		{
		buffersize = 0;
<?foreach xagent?>		MPI_Pack_size(node_info->$name_agent_no, xmachine$nameType, MPI_COMM_WORLD, &packsize);
		buffersize += packsize;
<?end foreach?>	
		send_agent_pack(node_info, buffersize);
	}
	
	node_info = node_info->next;
	}
	
	// receive agent pack message
	node_info = *p_node_info;
	while(node_info)
	{
		if(node_number != node_info->node_id)
		{
			MPI_Recv(&data, $number_xagentsplusone, MPI_INT, node_info->node_id, 36, MPI_COMM_WORLD, &status);
			//printf("%d> Recv data{%d,%d} to %d", node_number, data[0], data[1], node_info->node_id);
			if(data[0] > 0) receive_agent_pack(node_info, data[0]<?foreach xagent?>, data[$xagentcountplusone]<?end foreach?>);
<?foreach xagent?>			p_xmachine = &node_info->$name_agents;
			freexmachines();
			node_info->$name_agent_no = 0;
<?end foreach?>
			p_xmachine = &current_node->agents;
		}
		
		node_info = node_info->next;
	}
<?end if?>
}


/** \fn int_array * init_int_array()
 * \brief Allocate memory for a dynamic integer array.
 * \return int_array Pointer to the new dynamic integer array.
 */
int_array * init_int_array()
{
	int_array * new_array = (int_array *)malloc(sizeof(int_array));
	new_array->size = 0;
	new_array->total_size = ARRAY_BLOCK_SIZE;
	new_array->array = (int *)malloc(ARRAY_BLOCK_SIZE * sizeof(int));
	
	return new_array;
}

/** \fn void reset_int_array(int_array * array)
* \brief Reset the int array to hold nothing.
* \param array Pointer to the dynamic integer array.
*/
void reset_int_array(int_array * array)
{
	array->size = 0;
}

/** \fn void free_int_array(int_array * array)
* \brief Free the memory of a dynamic integer array.
* \param array Pointer to the dynamic integer array.
*/
void free_int_array(int_array * array)
{
	free(array->array);
	free(array);
}

/** \fn void sort_int_array(int_array * array)
* \brief Sort the elements of a dynamic integer array with smallest first.
* \param array Pointer to the dynamic integer array.
*/
void sort_int_array(int_array * array)
{
	int i, j, temp;
	/* Using bubble sorts nested loops */
	for(i=0; i<(array->size-1); i++)
	{
		for(j=0; j<(array->size-1)-i; j++) 
		{
			/* Comparing the values between neighbours */
			if(*(array->array+j+1) < *(array->array+j))
			{
				/* Check for end of list */
				if(*(array->array+j+1) != 0)
				{
					/* Swap neighbours */
					temp = *(array->array+j); 
					*(array->array+j) = *(array->array+j+1);
					*(array->array+j+1) = temp;
				}
			}
		}
	}
}

/** \fn void add_int(int_array * array, int new_int)
* \brief Add an integer to the dynamic integer array.
* \param array Pointer to the dynamic integer array.
* \param new_int The integer to add
*/
void add_int(int_array * array, int new_int)
{
	if(array->size == array->total_size)
	{
		array->total_size = array->total_size + ARRAY_BLOCK_SIZE;
		array->array = (int *)realloc(array->array, (array->total_size * sizeof(int)));
	}
	array->array[array->size] = new_int;
	array->size++;
}

/** \fn void remove_int(int_array * array, int index)
 * \brief Remove an integer from a dynamic integer array.
 * \param array Pointer to the dynamic integer array.
 * \param index The index of the integer to remove.
 */
void remove_int(int_array * array, int index)
{
	int i;
	
	if(index <= array->size)
	{
		// memcopy??
		for(i = index; i < array->size; i++)
		{
			array->array[i] = array->array[i+1];
		}
		array->size--;
	}
}

/** \fn void print_int_array(int_array * array)
 * \brief Print the elements of a dynamic integer array.
 * \param array Pointer to the dynamic integer array.
 */
void print_int_array(int_array * array)
{
	int i;
	printf("");
	for(i=0; i<array->size; i++)
	{
		printf("%d> %d", i, array->array[i]);
	}
}

/** \fn double_array * init_double_array()
 * \brief Allocate memory for a dynamic double array.
 * \return double_array Pointer to the new dynamic double array.
 */
double_array * init_double_array()
{
	double_array * new_array = (double_array *)malloc(sizeof(double_array));
	new_array->size = 0;
	new_array->total_size = ARRAY_BLOCK_SIZE;
	new_array->array = (double *)malloc(ARRAY_BLOCK_SIZE * sizeof(double));
	return new_array;
}

/** \fn void reset_double_array(double_array * array)
* \brief Reset the double array to hold nothing.
* \param array Pointer to the dynamic double array.
*/
void reset_double_array(double_array * array)
{
	array->size = 0;
}

/** \fn void free_double_array(double_array * array)
 * \brief Free the memory of a dynamic double array.
 * \param array Pointer to the dynamic double array.
 */
void free_double_array(double_array * array)
{
	free(array->array);
	free(array);
}

/** \fn void sort_double_array(double_array * array)
 * \brief Sort the elements of a dynamic double array with smallest first.
 * \param array Pointer to the dynamic double array.
 */
void sort_double_array(double_array * array)
{
	int i, j;
	double temp;
	
	/* Using bubble sorts nested loops */
	for(i=0; i<(array->size-1); i++)
	{
		for(j=0; j<(array->size-1)-i; j++) 
		{
			/* Comparing the values between neighbours */
			if(*(array->array+j+1) < *(array->array+j))
			{
				/* Check for end of list */
				if(*(array->array+j+1) != 0)
				{
					/* Swap neighbours */
					temp = *(array->array+j); 
					*(array->array+j) = *(array->array+j+1);
					*(array->array+j+1) = temp;
				}
			}
		}
	}
}

/** \fn void add_double(double_array * array, double new_double)
 * \brief Add an double to the dynamic double array.
 * \param array Pointer to the dynamic double array.
 * \param new_double The double to add
 */
void add_double(double_array * array, double new_double)
{
	if(array->size == array->total_size)
	{
		array->total_size = array->total_size + ARRAY_BLOCK_SIZE;
		array->array = (double *)realloc(array->array, (array->total_size * sizeof(double)));
	}
	array->array[array->size] = new_double;
	array->size++;
}

/** \fn void remove_double(double_array * array, int index)
 * \brief Remove an double from a dynamic double array.
 * \param array Pointer to the dynamic double array.
 * \param index The index of the double to remove.
 */
void remove_double(double_array * array, int index)
{
	int i;
	if(index <= array->size)
	{
		// memcopy??
		for(i = index; i < array->size; i++)
		{
			array->array[i] = array->array[i+1];
		}
		array->size--;
	}
}

/** \fn void print_double_array(double_array * array)
 * \brief Print the elements of a dynamic double array.
 * \param array Pointer to the dynamic double array.
 */
void print_double_array(double_array * array)
{
	int i;
	printf("");
	for(i=0; i<array->size; i++)
	{
		printf("%d> %f", i, array->array[i]);
	}
}

/** \fn char_array * init_char_array()
 * \brief Allocate memory for a dynamic char array.
 * \return char_array Pointer to the new dynamic char array.
 */
char_array * init_char_array()
{
	char_array * new_array = (char_array *)malloc(sizeof(char_array));
	new_array->size = 0;
	new_array->total_size = ARRAY_BLOCK_SIZE;
	new_array->array = (char *)malloc(ARRAY_BLOCK_SIZE * sizeof(char));
	new_array->array[0] = '\0';
	return new_array;
}

/** \fn void reset_char_array(char_array * array)
* \brief Reset the char array to hold nothing.
* \param array Pointer to the dynamic char array.
*/
void reset_char_array(char_array * array)
{
	array->size = 0;
}

/** \fn void free_char_array(char_array * array)
 * \brief Free the memory of a dynamic char array.
 * \param array Pointer to the dynamic char array.
 */
void free_char_array(char_array * array)
{
	free(array->array);
	free(array);
}

/** \fn void add_char(char_array * array, char new_char)
 * \brief Add an char to the dynamic char array.
 * \param array Pointer to the dynamic char array.
 * \param new_char The char to add
 */
void add_char(char_array * array, char new_char)
{
	if(array->size + 1 == array->total_size)
	{
		array->total_size = array->total_size + ARRAY_BLOCK_SIZE;
		array->array = (char *)realloc(array->array, (array->total_size * sizeof(char)));
	}
	array->array[array->size] = new_char;
	array->array[array->size + 1] = '\0';
	array->size++;
}

/** \fn void remove_char(char_array * array, int index)
 * \brief Remove an char from a dynamic char array.
 * \param array Pointer to the dynamic char array.
 * \param index The index of the char to remove.
 */
void remove_char(char_array * array, int index)
{
	int i;
	if(index <= array->size)
	{
		// memcopy??
		for(i = index; i < array->size; i++)
		{
			array->array[i] = array->array[i+1];
		}
		array->size--;
	}
}

/** \fn char * copy_array_to_str(char_array * array)
 * \brief Return pointer to string from a char_array.
 * \param array Pointer to the dynamic integer array.
 * \return char Pointer to the new string.
 */
char * copy_array_to_str(char_array * array)
{
	char * new_string = (char *)malloc( (array->size + 1) * sizeof(char));
	return strcpy(new_string, array->array);
}

/** \fn void print_char_array(char_array * array)
 * \brief Print the elements of a dynamic char array.
 * \param array Pointer to the dynamic char array.
 */
void print_char_array(char_array * array)
{
	printf("\%s", array->array);
}
